// Declare a function called maxOfTwo that takes in 
// two numbers and returns the greater value.

function maxofTwo(a,b) {
  if (a < b) {
    return b
  }
  else (b < a) {
    return a
  }
}

// SHOULD BE: 
function maxOfTwo(a, b) {
  if (a >= b) {
    return a;
  } else {
    return b;
  }
}
























// Let's refactor our mystery function. The result will remain the same but the implementation will now use one statement, instead of multiple statements.


function mystery(x, y) {
  let a = 4 * x * y;
  let b = 3 * y + 5;
  let c = a + b;
  return c;
}


// Rewrite the body of the mystery function so that there is a single return statement and no declared variables.

function mystery(x, y) {
  return (4 * x * y) + (3 * y + 5);
}













// The Park Rangers in Death Valley National Park divide up the feed responsibilities daily for the Bighorn Sheep population. Each sheep needs 2 lbs of ranger-provided food per day. We need a function to alert how many lbs of food each Park Ranger should load that day, based on the number of sheep and the number of rangers available.







// Let's start by building a function called feedPerRanger. This function should accept two parameters: one representing the current population of sheep, and one for the number of rangers available during the day.


function feedPerRanger(p ,r) {
  
}


//Inside the function, multiply the sheep population by 2 and divide it by the number of rangers. Assign the result to a new variable called feedPerRanger.

function feedPerRanger(p ,r) {
  let feedPerRanger = (p*2) / r
}



// Finish coding the function by displaying an alert with the following format:

// Each ranger should load *number* lbs of feed today.

// Replace *number* with the value for the variable feedPerRanger.


function feedPerRanger(p ,r) {
  let feedPerRanger = (p*2) / r
  alert("Each ranger should load " + feedPerRanger + " lbs of feed today.");
}
























// Back at the Hoover Dam, the technicians have decided they want more control of which generators are "on" and "off". Theyâ€™ve asked us to develop a way to adjust the total megawatts generated upon the switch-on or switch-off of a single, chosen generator.

// Define a new function named changePowerTotal that takes the following four parameters:

The total power generated.
The generator ID for the current generator.
The generator status.
The amount of power produced by the current generator.


function changePowerTotal(totalpg, idcg, genstat, powercg) {
  
}

//  Inside the function, add an if statement checking if the status is equal to the string "on".
function changePowerTotal(totalpg, idcg, genstat, powercg) {
  if (genstat == "on") {
    
  }

// If the status is "on", add the amount of power for that generator to the total power generated and display an alert in the following format:

// 

Generator #2 is now on, adding 62 MW, for a total of 62 MW!

function changePowerTotal(totalpg, idcg, genstat, powercg) {
  if (genstat == "on") {
    alert("Generator #" + idcg + " is now " + genstat + ", adding " + powercg + " MW, for a total of " + totalpg + "MW!")
  }

// SHOULD BE

function changePowerTotal(total, ID, status, power) {
  if (status == "on") {
    total += power;
    alert("Generator #" + ID + " is now " + status + ", adding " + power + " MW, for a total of " + total + " MW!");
  }
}

// IF "OFF" STATEMENT

function changePowerTotal(total, ID, status, power) {
  if (status == "on") {
    total += power;
    alert("Generator #" + ID + " is now " + status + ", adding " + power + " MW, for a total of " + total + " MW!");
  } else if (status == "off") {
    
  }
}











function changePowerTotal(total, ID, status, power) {
  if (status == "on") {
    total += power;
    alert("Generator #" + ID + " is now " + status + ", adding " + power + " MW, for a total of " + total + " MW!");
  } else if (status == "off") {
    total -= power;
    alert("Generator #" + ID + " is now " + status + ", removing " + power + " MW, for a total of " + total + " MW!");
  }
  return "total"
}











